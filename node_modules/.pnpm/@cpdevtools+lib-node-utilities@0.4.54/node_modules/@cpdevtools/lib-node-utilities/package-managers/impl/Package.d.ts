import Enumerable from "linq";
import { PackageJson } from "type-fest";
import { IPackageHandler } from "../IPackageHandler";
import { RunScriptOptions } from "../RunScriptOptions";
import { WorkspaceCallError } from "../WorkspaceCallError";
import { WorkspaceCallOptions } from "../WorkspaceCallOptions";
import { WorkspaceCallSuccess } from "../WorkspaceCallSuccess";
import { WorkspaceSortingOptions } from "../WorkspaceSortingOptions";
export declare abstract class Package implements IPackageHandler {
    private readonly _path;
    private readonly _file;
    private _data;
    constructor(data: PackageJson, path: string, filename: string);
    get path(): string;
    get fileName(): string;
    get fileType(): string;
    protected get data(): PackageJson.PackageJsonStandard & PackageJson.NonStandardEntryPoints & PackageJson.TypeScriptConfiguration & PackageJson.YarnConfiguration & PackageJson.JSPMConfiguration & {
        [key: string]: unknown;
    };
    get name(): string | undefined;
    get version(): string | undefined;
    get dependencies(): Partial<Record<string, string>>;
    get devDependencies(): Partial<Record<string, string>>;
    get peerDependencies(): Partial<Record<string, string>>;
    get optionalDependencies(): Partial<Record<string, string>>;
    get dependencyNames(): string[];
    get devDependencyNames(): string[];
    get peerDependencyNames(): string[];
    get optionalDependencyNames(): string[];
    execCmd(cmd: string): Promise<number>;
    protected abstract execPackageManager(cmd: string): Promise<number>;
    get scripts(): PackageJson.Scripts;
    hasScript(scriptName: string): boolean;
    runScript(script: string, options?: Partial<RunScriptOptions>): Promise<number | undefined>;
    protected execPackageScript(script: string): Promise<number>;
    get isWorkspace(): boolean;
    get workspaces(): string[] | PackageJson.WorkspaceConfig;
    private _workspaceQueryFactory;
    private _workspaceQuery?;
    protected get workspaceQuery(): Promise<Enumerable.IEnumerable<IPackageHandler>>;
    listWorkspacePackages(): Promise<IPackageHandler[]>;
    listWorkspaceNames(): Promise<(string | undefined)[]>;
    listWorkspacePaths(): Promise<string[]>;
    workspaceExecute(cmd: string, options: Partial<WorkspaceSortingOptions & WorkspaceCallOptions>): Promise<{
        hasErrors: boolean;
        errors: WorkspaceCallError<unknown>[];
        results: WorkspaceCallSuccess<number>[];
    }>;
    workspaceRunScript(cmd: string, options: Partial<WorkspaceSortingOptions & RunScriptOptions>): Promise<{
        hasErrors: boolean;
        errors: WorkspaceCallError<unknown>[];
        results: WorkspaceCallSuccess<number | undefined>[];
    }>;
    workspaceCall<T, TError = unknown>(fn: (pkg: IPackageHandler) => Promise<T>, options: Partial<WorkspaceSortingOptions & WorkspaceCallOptions>): Promise<{
        hasErrors: boolean;
        errors: WorkspaceCallError<TError>[];
        results: WorkspaceCallSuccess<T>[];
    }>;
    private _applyWorkspaceSortingOptionDefaults;
    private _buildWorkspaceWalkingOrder;
    private _buildWorkspaceDependencyArray;
    private _buildWorkspaceDependencyGraph;
    protected printLog(msg: string): Promise<string>;
    protected logInfo(msg: string): Promise<void>;
    protected logWarn(msg: string): Promise<void>;
    protected logError(msg: string): Promise<void>;
    install(): Promise<number>;
    workspaceInstall(options: Partial<WorkspaceSortingOptions & RunScriptOptions>): Promise<{
        hasErrors: boolean;
        errors: WorkspaceCallError<unknown>[];
        results: WorkspaceCallSuccess<number>[];
    }>;
}
