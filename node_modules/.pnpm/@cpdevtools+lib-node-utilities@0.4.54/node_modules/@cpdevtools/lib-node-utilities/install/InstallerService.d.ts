import Enumerable from "linq";
import { Installer } from "./installer/Installer";
import { InstallItem } from "./InstallItem";
import { KnownPlatforms } from "./platform/KnownPlatforms";
import { PlatformInstaller } from "./platform/PlatformInstaller";
export declare class InstallerService {
    private _init?;
    private _scanDirs;
    private _installers;
    constructor();
    scanDir(path: string): this;
    private scanForInstallers;
    private init;
    private _addInstaller;
    addInstaller(installer: Installer): void;
    get installers(): Promise<Enumerable.IEnumerable<Installer>>;
    getInstallerById(id: string, forPlatform?: KnownPlatforms): Promise<Installer | undefined>;
    getPlatformInstallerById(id: string, forPlatform?: KnownPlatforms): Promise<import("type-fest").Class<PlatformInstaller, any[]> | undefined>;
    hasInstaller(id: string, forPlatform?: KnownPlatforms): Promise<boolean>;
    private createInstallerInstance;
    isInstalled(id: string): Promise<boolean>;
    installOrUpdateById(idOrInstaller: string | PlatformInstaller): Promise<void>;
    uninstallById(idOrInstaller: string | PlatformInstaller): Promise<void>;
    updateById(idOrInstaller: string | PlatformInstaller): Promise<void>;
    private getListItems;
    private buildInstallerRunList;
    private buildInstallerRunListAdd;
    update(list: InstallItem[]): Promise<void>;
    installOrUpdate(list: InstallItem[]): Promise<void>;
    uninstall(list: InstallItem[]): Promise<void>;
}
export declare const GlobalInstallerService: InstallerService;
