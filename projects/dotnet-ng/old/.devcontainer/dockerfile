FROM mcr.microsoft.com/devcontainers/typescript-node:${IMAGE_VERSION}


# FROM mcr.microsoft.com/devcontainers/dotnet:7.0-bullseye

# RUN mkdir -p /devcontainer/.pnpm-store && chown -R vscode /devcontainer
# VOLUME [ "/devcontainer" ]
# VOLUME [ "/commandhistory" ]
# VOLUME [ "/home/vscode/.npm" ]
# VOLUME [ "/home/vscode/.cache/yarn" ]
# VOLUME [ "/home/vscode/.nuget" ]

# RUN SNIPPET="export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
#     && mkdir /commandhistory \
#     && touch /commandhistory/.bash_history \
#     && chown -R vscode /commandhistory \
#     && echo $SNIPPET >> "/home/vscode/.bashrc"

# WORKDIR /tmp

# # Install Docker
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/docker-outside-of-docker/install.sh ./docker-install.sh
# RUN chmod +x ./docker-install.sh
# RUN ./docker-install.sh


# # Install Dotnet
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/dotnet/scripts/vendor/dotnet-install.sh ./dotnet-install.sh
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/dotnet/install.sh ./dotnet-install.sh
# RUN chmod +x ./dotnet-install.sh

# ENV VERSION=3.1
# RUN ./dotnet-install.sh

# ENV VERSION=5
# RUN ./dotnet-install.sh

# ENV VERSION=6
# RUN ./dotnet-install.sh

# RUN dotnet tool install -g dotnet-format

# # Install Node
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/node/install.sh ./node-install.sh
# RUN chmod +x ./node-install.sh

# ENV VERSION=14
# RUN ./node-install.sh
# RUN npm install -g @angular/cli@13 ts-node @cpdevtools/dcman-cli


# ENV VERSION=16
# RUN ./node-install.sh
# RUN npm install -g @angular/cli@13 ts-node @cpdevtools/dcman-cli

# ENV VERSION=18
# RUN ./node-install.sh
# RUN npm install -g @angular/cli@16 ts-node @cpdevtools/dcman-cli

# RUN ng config -g cli.packageManager pnpm


# # Install Github CLI

# ENV VERSION=latest
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/github-cli/install.sh ./gh-install.sh
# RUN chmod +x ./gh-install.sh
# RUN ./gh-install.sh


# # Install Java

# ENV VERSION=8.0.382-tem
# ADD https://raw.githubusercontent.com/devcontainers/features/main/src/java/install.sh ./java-install.sh
# RUN chmod +x ./java-install.sh
# RUN ./java-install.sh

# ENV VERSION=11.0.20.1-tem
# RUN ./java-install.sh

# ENV VERSION=17.0.8.1-tem
# RUN ./java-install.sh


# # Install Android SDK

# RUN apt-get update \
#   && apt-get install -y android-sdk usbutils python

# # Install Android CLI Tools

# RUN wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -O android-tools.zip
# RUN unzip android-tools.zip

# RUN rm android-tools.zip
# RUN mkdir -p /usr/lib/android-sdk/cmdline-tools/latest/
# RUN mv cmdline-tools/* /usr/lib/android-sdk/cmdline-tools/latest/

# ENV ANDROID_HOME "/usr/lib/android-sdk"
# ENV ANDROID_SDK_ROOT "$ANDROID_HOME"

# ENV PATH "$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
# ENV PATH "$PATH:$ANDROID_HOME/platform-tools"
# ENV PATH "$PATH:$ANDROID_HOME/tools/bin"

# RUN yes | sdkmanager --licenses

# RUN /usr/lib/android-sdk/cmdline-tools/latest/bin/sdkmanager --update 
# RUN /usr/lib/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-30" "build-tools;30.0.2" "build-tools;30.0.3"
# RUN sdkmanager --uninstall "build-tools;debian"

# # Install Chrome for testing

# RUN apt-get update \
#     && apt-get install libxss1 libappindicator1 -y \
#     && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
#     && apt install ./google-chrome*.deb -y  	

# RUN echo 'kernel.unprivileged_userns_clone=1' > /etc/sysctl.d/00-local-userns.conf

# # Cleanup
# RUN apt-get autoremove -y \
# && apt-get clean -y \
# && rm -rf /var/lib/apt/lists/*
# RUN rm -Rf /tmp/*
# ENV DEBIAN_FRONTEND=dialog


# CMD [ "sleep", "infinity" ]